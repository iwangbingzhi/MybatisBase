<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--sql隔离，对sql进行分类化管理
使用Mapper代理方法开发，namespace有特殊的重要作用
-->
<mapper namespace="com.wbz.mapper.UserMapper">
    <!--在映射文件中配置很多的sql语句-->
    <!--通过select执行数据库的查询，id：表示映射文件中的sql
    称之为statement的id,将sql语句封装到MappedStatement对象中，所以称之为Statement的id
    parameterType：指定输入参数的类型
    #{}表示一个占位符
    #{id}:其中的Id表示接收输入的参数，参数名称就是id，如果输入的参数是ian但类型，#{}中的参数名可以任意，可以是value或者是其他的名称都可以
    resultType:指定Sql的输出结果的类型，select指定resultType表示将单条记录映射成java对象
    -->
    <select id="findUserById" parameterType="int" resultType="user">
        SELECT * FROM USER WHERE id = #{value}
    </select>

    <!--根据用户名模糊查询用户信息 可能返回多条
        ${}:表示拼接sql串，将接收到的参数的内容不加任何修饰拼接在sql中
        使用${}拼接sql，引起sql注入
        ${value}接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value  不建议使用${}
    -->
    <select id="findUserByName" parameterType="String" resultType="com.wbz.po.User">
        SELECT * FROM USER  WHERE username LIKE '%${value}%'
    </select>

    <!--    #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过ognl获取对象的属性值-->

    <insert id="insertUser" parameterType="com.wbz.po.User">
        <!-- 将插入数据的主键返回，返回到user对象中
         SELECT LAST_INSERT_ID()：得到刚刚insert进去记录的主键值，只适用于自增主键
         keyProperty:将查询到主键值设置到parametertype指定的对象的哪个属性
         order：下面语句相对于insert语句的执行顺序
         -->
        <selectKey order="AFTER" keyProperty="id" resultType="int">
            SELECT LAST_INSERT_ID()

        </selectKey>

        <!--使用mysql uuid生成主键
        执行过程：首先通过uuid()得到主键，将主键设置到user对象的id属性值中
        其次在insert执行时，从user对象中取出id属性值
        -->
        <!--<selectKey order="BEFORE" keyProperty="id" resultType="String">
            SELECT uuid()
        </selectKey>
        INSERT INTO USER (id,username,birthday,sex,address) VALUE (#{id},#{username},#{birthday},#{sex},#{address});
        -->

        INSERT INTO USER (username,birthday,sex,address) VALUE (#{username},#{birthday},#{sex},#{address});
    </insert>

    <!--
    根据id删除用户，输入Id值
    -->
    <delete id="deleteUser" parameterType="int">
        delete from user where id=#{id}
    </delete>


    <!--    根据id更新用户
    分析:需要传入用户Id,需要传入用户的更新信息
    parameterType指定user对象 包括了更新的信息
    #{id}:从输入user对象中获取id属性值
    -->
    <update id="updateUser" parameterType="com.wbz.po.User">
        update user set username=#{username},birthday=#{birthday},
        sex=#{sex},address=#{address}
        where id=#{id}
    </update>

    <!--用户信息复杂查询-->
    <select id="findUserList" parameterType="userqueryvo" resultType="UserCustomer">
        select * from user where user.sex=#{userCustomer.sex} and user.username like "%${userCustomer.username}%"
    </select>

    <!--用户信息综合查询总数-->
    <select id="findUserCount" resultType="int" parameterType="userqueryvo">
        select count(*) from user where user.sex=#{userCustomer.sex} and user.username like "%${userCustomer.username}%"
    </select>
    
    <!--使用resultmap进行输出映射
    resultMap:指定定义的resultmap的id,如果这个resultMap在其他的mapper文件中，前面需要加namespace
    -->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username username_ FROM USER WHERE id = #{value}
    </select>
<!--    定义resultmap 将 SELECT id id_,username username_ FROM USER和user类中的属性作一个映射关系
        type:resultmap最终映射java对象类型，可以使用别名
        id：对resultmap的唯一标识
-->
    <resultMap id="userResultMap" type="user">
        <!--
        id：表示查询结果集中唯一标识
        culumn:查询出来的列名
        property:type指定的pojo类型中的属性名
        建立column和property作一个映射关系
        -->
        <id column="id_" property="id"/>

        <!--result对普通列的映射定义-->
        <result column="username_" property="username"/>
    </resultMap>

</mapper>